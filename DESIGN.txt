Reasons For Unmoved Methods

createMinerFull
createMinerNotFull
createObstacle
createOre
createOreBlob
createQuake
createVein
createBlacksmith
    I did not move these per our instructions Friday. I think they should remain in 
    Functions because although they are entities, the entities are just being instantiated,
    and don't deal with any methods in Entity itself.

moveOreToBLob
    This method could have been moved to Entity, WorldModel, or EventScheduler.
    I did not move it to Entity because it contained two entities, and its style didn't
    fit in either WorldModel or EventScheduler.

loadImages
process ImageLine
setAlpha
getImages
    These methods I also did not move, because they take in variables not specific to a class

parseMiner
parseObstacle
parseOre
parseSmith
parseVein
    I did not move the parse methods firstly because of their large amount of final final variables,
   and secondly because they don't rely on one method, but equally use Worldmodel and ImageStore

processLine
    I did not move this simply because it falls into the same reasons as the above methods

Load
    I followed the hint on piazza and left this method here, but it would also not fit well in either WorldModel
    or ImageStore, as it does not reference any methods in either class.


Reasons For Moving Ambiguous Methods

executeMinerFullActivity
executeMinerNotFullActivity
executeOreActivity
executeOreBlobActivity
executeQuakeActivity
executeVeinActivity
    Of the best files they could be moved to, Entity, WorldModel, and EventScheduler,
    I chose Entity because the code in each method controls the entities' movements,
    their schedulings, and more. 

getCurrentImage
    I was able to split this up per your lab instructions into both Background and Entity.

nextPositionMiner
nextPositionOreBLob
    Both of these methods used the Point class a fair amount, but I chose to put them in the Entity class
    because it the the Entity, either the Miner or Blob, that is moving, and they use the Point class to do it.
    So it makes more sense for the movement logic to be in the Entity class.

adjacent
    I chose to put the adjacent method into the Point class because it deals heavily with Point class attributes.
